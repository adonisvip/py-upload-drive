import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle
import io

# Ph·∫°m vi quy·ªÅn truy c·∫≠p Google Drive
SCOPES = ['https://www.googleapis.com/auth/drive.file']

# Bi·∫øn to√†n c·ª•c
service = None
folder_dict = {}

# ƒêƒÉng nh·∫≠p v√†o Google Drive
def login_google_drive():
    global service

    creds = None
    if os.path.exists("token.pickle"):
        with open("token.pickle", "rb") as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
        creds = flow.run_local_server(port=0)

        with open("token.pickle", "wb") as token:
            pickle.dump(creds, token)

    service = build("drive", "v3", credentials=creds)
    messagebox.showinfo("Th√†nh c√¥ng", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
    build_folder_tree()

# L·∫•y danh s√°ch th∆∞ m·ª•c v√† file trong Google Drive
def get_drive_structure(parent_id=None):
    query = f"'{parent_id}' in parents" if parent_id else "'root' in parents"
    
    results = service.files().list(
        q=query,
        fields="files(id, name, mimeType, parents)"
    ).execute()

    files = results.get("files", [])
    return files

# X√¢y d·ª±ng c√¢y th∆∞ m·ª•c trong UI
def build_folder_tree():
    if service is None:
        messagebox.showerror("L·ªói", "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p v√†o Google Drive!")
        return

    tree.delete(*tree.get_children())
    folder_dict.clear()
    
    root_node = tree.insert("", "end", "root", text="üìÅ Google Drive", open=True)
    folder_dict["root"] = None
    
    def add_nodes(parent_id, parent_node):
        items = get_drive_structure(parent_id)
        for item in items:
            item_name = f"üìÇ {item['name']}" if item["mimeType"] == "application/vnd.google-apps.folder" else f"üìÑ {item['name']}"
            node = tree.insert(parent_node, "end", item["id"], text=item_name, open=False)
            folder_dict[item["id"]] = item["id"]
            
            if item["mimeType"] == "application/vnd.google-apps.folder":
                add_nodes(item["id"], node)

    add_nodes(None, root_node)

# X·ª≠ l√Ω khi ch·ªçn th∆∞ m·ª•c trong c√¢y
def on_tree_select(event):
    selected_item = tree.focus()
    selected_folder_id = folder_dict.get(selected_item, None)
    list_files(selected_folder_id)

# Li·ªát k√™ file trong th∆∞ m·ª•c ƒë√£ ch·ªçn
def list_files(folder_id):
    if service is None:
        messagebox.showerror("L·ªói", "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p v√†o Google Drive!")
        return

    file_listbox.delete(0, tk.END)
    files = get_drive_structure(folder_id)
    
    for file in files:
        if file["mimeType"] != "application/vnd.google-apps.folder":
            file_listbox.insert(tk.END, file["name"])

# Upload file v√†o th∆∞ m·ª•c ƒë√£ ch·ªçn
def upload_file():
    if service is None:
        messagebox.showerror("L·ªói", "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p v√†o Google Drive!")
        return

    selected_item = tree.focus()
    parent_id = folder_dict.get(selected_item, None)

    file_path = filedialog.askopenfilename()
    if not file_path:
        return

    file_name = os.path.basename(file_path)
    file_metadata = {"name": file_name}
    if parent_id:
        file_metadata["parents"] = [parent_id]

    media = MediaFileUpload(file_path, resumable=True)
    service.files().create(body=file_metadata, media_body=media).execute()

    messagebox.showinfo("Th√†nh c√¥ng", f"File {file_name} ƒë√£ ƒë∆∞·ª£c upload!")
    list_files(parent_id)

# T·∫°o th∆∞ m·ª•c m·ªõi
def create_folder():
    if service is None:
        messagebox.showerror("L·ªói", "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p v√†o Google Drive!")
        return

    folder_name = filedialog.askstring("T·∫°o th∆∞ m·ª•c", "Nh·∫≠p t√™n th∆∞ m·ª•c m·ªõi:")
    if not folder_name:
        return

    selected_item = tree.focus()
    parent_id = folder_dict.get(selected_item, None)

    folder_metadata = {
        "name": folder_name,
        "mimeType": "application/vnd.google-apps.folder",
    }
    
    if parent_id:
        folder_metadata["parents"] = [parent_id]

    folder = service.files().create(body=folder_metadata, fields="id").execute()
    folder_dict[folder["id"]] = folder["id"]

    messagebox.showinfo("Th√†nh c√¥ng", f"Th∆∞ m·ª•c '{folder_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o!")
    build_folder_tree()

# T·∫£i file v·ªÅ m√°y
def download_file():
    if service is None:
        messagebox.showerror("L·ªói", "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p v√†o Google Drive!")
        return

    selected_file = file_listbox.get(tk.ACTIVE)
    if not selected_file:
        messagebox.showerror("L·ªói", "B·∫°n ch∆∞a ch·ªçn file!")
        return

    results = service.files().list(q=f"name='{selected_file}'", fields="files(id, name)").execute()
    files = results.get("files", [])
    
    if not files:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file!")
        return

    file_id = files[0]["id"]
    save_path = filedialog.asksaveasfilename(initialfile=selected_file, defaultextension="")

    if not save_path:
        return

    request = service.files().get_media(fileId=file_id)
    fh = io.FileIO(save_path, "wb")
    downloader = MediaIoBaseDownload(fh, request)

    done = False
    while not done:
        status, done = downloader.next_chunk()

    messagebox.showinfo("Th√†nh c√¥ng", f"File {selected_file} ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ {save_path}")

# Giao di·ªán UI
root = tk.Tk()
root.title("Google Drive Manager")
root.geometry("700x500")

frame_left = tk.Frame(root)
frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)

frame_right = tk.Frame(root)
frame_right.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)

tree = ttk.Treeview(frame_left)
tree.pack(fill=tk.BOTH, expand=True)
tree.bind("<<TreeviewSelect>>", on_tree_select)

file_listbox = tk.Listbox(frame_right, height=10)
file_listbox.pack(fill=tk.BOTH, expand=True)

btn_login = tk.Button(root, text="üîë ƒêƒÉng nh·∫≠p", command=login_google_drive)
btn_login.pack(pady=5)

btn_create_folder = tk.Button(root, text="üìÇ T·∫°o Th∆∞ M·ª•c", command=create_folder)
btn_create_folder.pack(pady=5)

btn_upload = tk.Button(root, text="‚¨ÜÔ∏è Upload File", command=upload_file)
btn_upload.pack(pady=5)

btn_download = tk.Button(root, text="‚¨áÔ∏è T·∫£i File", command=download_file)
btn_download.pack(pady=5)

root.mainloop()
